{
  "name": "Tour",
  "tagline": "Touring and on-boarding for javascript applications",
  "body": "# Tour\r\n\r\n[![Join the chat at https://gitter.im/tourjs/tour](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tourjs/tour?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\nA simple, minimalist touring and on-boarding library for javascript\r\n\r\n<!-- ## [Awesome Demo](http://tourjs.github.io/tour) -->\r\n\r\n## Features\r\n\r\n* Supports single page apps, and complex scrollable content\r\n*\tResponsive & Intelligent\r\n*\tAutomagic Positioning\r\n*\tPromise Driven Events & Hooks\r\n*\tTour does not manipulate or relayer your DOM elements in any way\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install nz-tour --save\r\n```\r\n\r\n```javascript\r\nimport Tour from 'tour'\r\n```\r\n\r\n## Simple Usage\r\n\r\n```javascript\r\nconst myTour = {\r\n\tconfig: {} // see config\r\n    steps: [{\r\n      target: '#first-element',\r\n      content: 'This is the first step!',\r\n    }, {\r\n      target: '.some .other .element',\r\n      content: 'Blah blah blah. I prefer to show up on the right.',\r\n\t\t\tplacement: [ 'right', 'top', 'bottom', 'left' ],\r\n    }, {\r\n      target: '#menu-element',\r\n      content: 'I guess this is a menu!',\r\n    }, {\r\n      target: '#last-element',\r\n      content: 'It is over! :(',\r\n    }]\r\n};\r\n\r\nTour.start(myTour)\r\n  .then(() => {\r\n    console.log('Tour Finished!');\r\n  })\r\n  .catch(() => {\r\n    console.log('Tour Interrupted!')\r\n  });\r\n\r\n```\r\n\r\n## Config\r\n\r\nDefaults:\r\n```javascript\r\n{\r\n\tcanExit: false, // Can exit the tour or not (via an X button)\r\n\tpadding: 5, // Padding around the highlighted element\r\n\tmaxHeight: 120, // Max height of the tooltip box\r\n\tmaxWidth: 250, // Max width of the tooltip box\r\n  maskVisible: true, // Shows the mask\r\n  maskVisibleOnNoTarget: false, // Shows a full page mask if no target element has been specified\r\n  maskClickThrough: false, // Allows the user to interact with elements beneath the mask\r\n  maskScrollThrough: true // Allows the user to scroll the scrollbox or window through the mask\r\n  maskColor: 'rgba(0,0,0,.7)' // The mask color\r\n  scrollBox: 'body', // The container to scroll when searching for elements\r\n  previousText: 'Previous',\r\n  nextText: 'Next',\r\n  finishText: 'Finish',\r\n  showPrevious: true, // Setting to false hides the previous button\r\n  showNext: true // Setting to false hides the next button\r\n  animationDuration: 400, // Animation Duration for the box and mask\r\n  placement: ['bottom', 'right', 'top','left'],\r\n  dark: false, // Dark mode (Works great with `mask.visible = false`)\r\n  disableInteraction: false, // Disable interaction with the highlighted elements\r\n  disableEscExit: false // Disable end of tour when pressing ESC,\r\n}\r\n```\r\n\r\n## API\r\n\r\n#### .start(tour)\r\n- Starts a Tour\r\n- Params:\r\n  *\t*tour*: Tour Object\r\n- Returns:\r\n  *\tPromise that resolves when the tour is finished or rejected when aborted.\r\n\r\n#### .stop()\r\n- Stops a Tour\r\n- Returns:\r\n  *\tPromise that resolves when the tour is stopped.\r\n\r\n#### .next()\r\n- Goes to the next step in the current tour\r\n- Returns:\r\n  *\tPromise that resolves when the next step is reached\r\n\r\n#### .previous()\r\n- Goes to the previous step in the current tour\r\n  *\tPromise that resolves when the previous step is reached\r\n\r\n#### .goto(index)\r\n- Goes to a specific step in the tour\r\n- Params:\r\n  *\t*index*: The 0-index number of the step eg. `0, 1, 2, 3`\r\n\r\n- Returns:\r\n  *\tPromise that resolves when the specific step is reached\r\n\r\n\r\n## Using Promise Event Hooks\r\nYou can pass any function that returns a promise to the `before` and `after` properties for any step.  When the promise resolves, the tour moves on accordingly.\r\n\r\n#### Example\r\n```javascript\r\nvar tour = {\r\n\tsteps: [{\r\n      target: '#first-element',\r\n      content: 'This is the first step!',\r\n    }, {\r\n      target: '.some .other .element',\r\n      content: 'Blah blah blah.',\r\n      before: () => {\r\n      \t// Do something amazing\r\n      \treturn new Promise()\r\n    \t}\r\n    }, {\r\n      target: '#menu-element',\r\n      content: 'I guess this is a menu!',\r\n      after: () => {\r\n      \t// Do some more cool stuff\r\n      \treturn new Promise()\r\n    \t}\r\n    }, {\r\n      target: '#last-element',\r\n      content: 'It is over! :(',\r\n    }]\r\n}\r\n```\r\n\r\n\r\n## Roadmap & Contributing\r\n\r\nAll PR's and contributions are more than welcome!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}